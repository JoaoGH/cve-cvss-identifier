import requests
import json
import cvss
import time
import re

def getCVEContent(code):
    base = "https://cve.circl.lu/api/cve/"
    url = base + code
    content = requests.get(url)
    return content

def showCVE(cve):
    print(json.dumps(cve, indent=4))

def calculateCVSS(cve):
    vector = cve.get("cvss-vector")

    if vector is None:
        return None

    vector = vector.split("/")

    # basescore
    AccessVector = vector[0]
    AccessComplexity = vector[1]
    Authentication = vector[2]
    ConfidentialityImpact = vector[3]
    IntegrityImpact = vector[4]
    AvailabilityImpact = vector[5]

    vector_v2 = ""
    vector_v2 += AccessVector + "/"
    vector_v2 += AccessComplexity + "/"
    vector_v2 += Authentication + "/"
    vector_v2 += ConfidentialityImpact + "/"
    vector_v2 += IntegrityImpact + "/"
    vector_v2 += AvailabilityImpact

    # temporais
    calc_temp = None
    while calc_temp not in ["S", "N"]:
        calc_temp = input("Calcular scores temporais? \n\tS - Sim \n\tN - Não\n").upper()

        if calc_temp not in ["S", "N"]:
            print("Entrada invalida, tenta novamente com um valor valido.\n")
            time.sleep(1) ## aguarda 1 segundo
            continue
        elif calc_temp == "N":
            break

        E = None
        while E not in ["ND" ,"U", "POC", "F", "H"]:
            print("Informe o nivel de explorabilidade")
            print("\tND  - Not defined")
            print("\tU   - Unproven that expliot exists")
            print("\tPOC - Proof of concept code")
            print("\tF   - Functional exploit exists")
            print("\tH   - High")
            E = input().upper()
        vector_v2 += "/E:" + E

        RL = None
        while RL not in ["ND" ,"OF", "TF", "W", "U"]:
            print("Informe o nivel de remediacao")
            print("\tND  - Not defined")
            print("\tOF  - Official fix")
            print("\tTF  - Temporarary fix")
            print("\tW   - Workaround")
            print("\tU   - Unavailable")
            RL = input().upper()
        vector_v2 += "/RL:" + RL

        RC = None
        while RC not in ["ND" ,"UC", "C", "UR"]:
            print("Informe o nivel de report")
            print("\tND  - Not Defined")
            print("\tUC  - Unconfirmed")
            print("\tC   - Confirmed")
            print("\tUR  - Uncorroborated")
            RC = input().upper()
        vector_v2 += "/RC:" + RC

    # ambientais
    calc_env = None
    while calc_env not in ["S", "N"]:
        calc_env = input("Calcular scores ambientais? \n\tS - Sim \n\tN - Não\n").upper()

        if calc_env not in ["S", "N"]:
            print("Entrada invalida, tenta novamente com um valor valido.\n")
            time.sleep(1)
            continue
        elif calc_env == "N":
            break

        CDP = None
        while CDP not in ["ND", "N" ,"L", "LM", "MH", "H"]:
            print("Informe o nivel de collateral damage potential")
            print("\tND - Not Defined")
            print("\tN  - None")
            print("\tL  - Low-light loss")
            print("\tLM - Low-Medium")
            print("\tMH - Medium-High")
            print("\tH  - High-Catastraphic loss")
            CDP = input().upper()
        vector_v2 += "/CDP:" + CDP

        TD = None
        while TD not in ["ND" ,"L", "M", "H"]:
            print("Informe o nivel de remediação")
            print("\tND - Not Defined")
            print("\tL  - Low")
            print("\tM  - Medium")
            print("\tH  - High")
            TD = input().upper()
        vector_v2 += "/TD:" + TD

        CR = None
        while CR not in ["ND" ,"N", "L", "M", "H"]:
            print("Informe o nivel de confidentiality requirement")
            print("\tND - Not Defined")
            print("\tN  - None")
            print("\tL  - Low")
            print("\tM  - Medium")
            print("\tH  - High")
            CR = input().upper()
        vector_v2 += "/CR:" + CR

        IR = None
        while IR not in ["ND" ,"L", "M", "H"]:
            print("Informe o nivel de Integrity Requirement")
            print("\tND - Not Defined")
            print("\tL  - Low")
            print("\tM  - Medium")
            print("\tH  - High")
            IR = input().upper()
        vector_v2 += "/IR:" + IR

        AR = None
        while AR not in ["ND" ,"L", "M", "H"]:
            print("Informe o nivel de Availability Requirement")
            print("\tND - Not Defined")
            print("\tL  - Low")
            print("\tM  - Medium")
            print("\tH  - High")
            AR = input().upper()
        vector_v2 += "/AR:" + AR

    c = cvss.CVSS2(vector_v2)

    return c

def showData(cve, cvssData):
    print("Dados", cve.get("id"))
    print("\tResumo \t\t\t:", cve.get("summary"))
    print("\tPublicado em \t:", cve.get("Published"))
    print("\tModificado em \t:", cve.get("Modified"))
    print()
    if cvssData:
        print("Pontuacao:")
        print("\tBase \t\t\t:", cvssData.base_score)
        print("\tTemporal \t\t:", cvssData.temporal_score)
        print("\tEnvironmental \t:", cvssData.environmental_score)
        print()
    if cve.get("vulnerable_product"):
        print("Produtos Vulneraveis:")
        for it in cve.get("vulnerable_product"):
            print("\t" + it)
        print()
    if cve.get("references"):
        print("Referencias: ")
        for it in cve.get("references"):
            print("\t" + it)

code = ""
while not re.match("CVE-[0-9]{4}-[0-9]{4,5}", code):
    code = input("Insira o código da CVE: ").upper()
    if not re.match("CVE-[0-9]{4}-[0-9]{4,5}", code):
        print("Valor invalido, tente novamente")
        time.sleep(1)

cve = getCVEContent(code)

cvssData = calculateCVSS(cve.json())

showData(cve.json(), cvssData)
